// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v5.29.0
// source: start_transaction.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "ocpp_csms_server";

export interface StartTransactionRequest {
  chargerId: string;
  evseId: string;
}

export interface StartTransactionResponse {
  transactionId: string;
}

function createBaseStartTransactionRequest(): StartTransactionRequest {
  return { chargerId: "", evseId: "" };
}

export const StartTransactionRequest: MessageFns<StartTransactionRequest> = {
  encode(message: StartTransactionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chargerId !== "") {
      writer.uint32(10).string(message.chargerId);
    }
    if (message.evseId !== "") {
      writer.uint32(18).string(message.evseId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartTransactionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartTransactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chargerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.evseId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartTransactionRequest {
    return {
      chargerId: isSet(object.chargerId) ? globalThis.String(object.chargerId) : "",
      evseId: isSet(object.evseId) ? globalThis.String(object.evseId) : "",
    };
  },

  toJSON(message: StartTransactionRequest): unknown {
    const obj: any = {};
    if (message.chargerId !== "") {
      obj.chargerId = message.chargerId;
    }
    if (message.evseId !== "") {
      obj.evseId = message.evseId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartTransactionRequest>, I>>(base?: I): StartTransactionRequest {
    return StartTransactionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartTransactionRequest>, I>>(object: I): StartTransactionRequest {
    const message = createBaseStartTransactionRequest();
    message.chargerId = object.chargerId ?? "";
    message.evseId = object.evseId ?? "";
    return message;
  },
};

function createBaseStartTransactionResponse(): StartTransactionResponse {
  return { transactionId: "" };
}

export const StartTransactionResponse: MessageFns<StartTransactionResponse> = {
  encode(message: StartTransactionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transactionId !== "") {
      writer.uint32(10).string(message.transactionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartTransactionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartTransactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.transactionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartTransactionResponse {
    return { transactionId: isSet(object.transactionId) ? globalThis.String(object.transactionId) : "" };
  },

  toJSON(message: StartTransactionResponse): unknown {
    const obj: any = {};
    if (message.transactionId !== "") {
      obj.transactionId = message.transactionId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartTransactionResponse>, I>>(base?: I): StartTransactionResponse {
    return StartTransactionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartTransactionResponse>, I>>(object: I): StartTransactionResponse {
    const message = createBaseStartTransactionResponse();
    message.transactionId = object.transactionId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
