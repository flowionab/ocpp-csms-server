// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.0
//   protoc               v5.29.0
// source: reboot_charger.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "ocpp_csms_server";

export interface RebootChargerResponse {
}

export interface RebootChargerRequest {
  chargerId: string;
  rebootType: RebootChargerRequest_RebootType;
}

export enum RebootChargerRequest_RebootType {
  Soft = 0,
  Hard = 1,
  UNRECOGNIZED = -1,
}

export function rebootChargerRequest_RebootTypeFromJSON(object: any): RebootChargerRequest_RebootType {
  switch (object) {
    case 0:
    case "Soft":
      return RebootChargerRequest_RebootType.Soft;
    case 1:
    case "Hard":
      return RebootChargerRequest_RebootType.Hard;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RebootChargerRequest_RebootType.UNRECOGNIZED;
  }
}

export function rebootChargerRequest_RebootTypeToJSON(object: RebootChargerRequest_RebootType): string {
  switch (object) {
    case RebootChargerRequest_RebootType.Soft:
      return "Soft";
    case RebootChargerRequest_RebootType.Hard:
      return "Hard";
    case RebootChargerRequest_RebootType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseRebootChargerResponse(): RebootChargerResponse {
  return {};
}

export const RebootChargerResponse: MessageFns<RebootChargerResponse> = {
  encode(_: RebootChargerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RebootChargerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRebootChargerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RebootChargerResponse {
    return {};
  },

  toJSON(_: RebootChargerResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RebootChargerResponse>, I>>(base?: I): RebootChargerResponse {
    return RebootChargerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RebootChargerResponse>, I>>(_: I): RebootChargerResponse {
    const message = createBaseRebootChargerResponse();
    return message;
  },
};

function createBaseRebootChargerRequest(): RebootChargerRequest {
  return { chargerId: "", rebootType: 0 };
}

export const RebootChargerRequest: MessageFns<RebootChargerRequest> = {
  encode(message: RebootChargerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.chargerId !== "") {
      writer.uint32(10).string(message.chargerId);
    }
    if (message.rebootType !== 0) {
      writer.uint32(16).int32(message.rebootType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RebootChargerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRebootChargerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.chargerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.rebootType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RebootChargerRequest {
    return {
      chargerId: isSet(object.chargerId) ? globalThis.String(object.chargerId) : "",
      rebootType: isSet(object.rebootType) ? rebootChargerRequest_RebootTypeFromJSON(object.rebootType) : 0,
    };
  },

  toJSON(message: RebootChargerRequest): unknown {
    const obj: any = {};
    if (message.chargerId !== "") {
      obj.chargerId = message.chargerId;
    }
    if (message.rebootType !== 0) {
      obj.rebootType = rebootChargerRequest_RebootTypeToJSON(message.rebootType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RebootChargerRequest>, I>>(base?: I): RebootChargerRequest {
    return RebootChargerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RebootChargerRequest>, I>>(object: I): RebootChargerRequest {
    const message = createBaseRebootChargerRequest();
    message.chargerId = object.chargerId ?? "";
    message.rebootType = object.rebootType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
